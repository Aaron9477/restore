// Generated by gencpp from file object_follower_zed/zed_roi.msg
// DO NOT EDIT!


#ifndef OBJECT_FOLLOWER_ZED_MESSAGE_ZED_ROI_H
#define OBJECT_FOLLOWER_ZED_MESSAGE_ZED_ROI_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace object_follower_zed
{
template <class ContainerAllocator>
struct zed_roi_
{
  typedef zed_roi_<ContainerAllocator> Type;

  zed_roi_()
    : x_offset(0.0)
    , y_offset(0.0)
    , height(0.0)
    , width(0.0)
    , depth(0.0)  {
    }
  zed_roi_(const ContainerAllocator& _alloc)
    : x_offset(0.0)
    , y_offset(0.0)
    , height(0.0)
    , width(0.0)
    , depth(0.0)  {
  (void)_alloc;
    }



   typedef float _x_offset_type;
  _x_offset_type x_offset;

   typedef float _y_offset_type;
  _y_offset_type y_offset;

   typedef float _height_type;
  _height_type height;

   typedef float _width_type;
  _width_type width;

   typedef float _depth_type;
  _depth_type depth;




  typedef boost::shared_ptr< ::object_follower_zed::zed_roi_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::object_follower_zed::zed_roi_<ContainerAllocator> const> ConstPtr;

}; // struct zed_roi_

typedef ::object_follower_zed::zed_roi_<std::allocator<void> > zed_roi;

typedef boost::shared_ptr< ::object_follower_zed::zed_roi > zed_roiPtr;
typedef boost::shared_ptr< ::object_follower_zed::zed_roi const> zed_roiConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::object_follower_zed::zed_roi_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::object_follower_zed::zed_roi_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace object_follower_zed

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': True, 'IsMessage': True, 'HasHeader': False}
// {'object_follower_zed': ['/home/ubuntu/WYZ/wyz_ws/src/object_follower_zed/msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::object_follower_zed::zed_roi_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::object_follower_zed::zed_roi_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::object_follower_zed::zed_roi_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::object_follower_zed::zed_roi_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::object_follower_zed::zed_roi_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::object_follower_zed::zed_roi_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::object_follower_zed::zed_roi_<ContainerAllocator> >
{
  static const char* value()
  {
    return "6955979b614b0463501e8c8fdd6f9c58";
  }

  static const char* value(const ::object_follower_zed::zed_roi_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x6955979b614b0463ULL;
  static const uint64_t static_value2 = 0x501e8c8fdd6f9c58ULL;
};

template<class ContainerAllocator>
struct DataType< ::object_follower_zed::zed_roi_<ContainerAllocator> >
{
  static const char* value()
  {
    return "object_follower_zed/zed_roi";
  }

  static const char* value(const ::object_follower_zed::zed_roi_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::object_follower_zed::zed_roi_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float32 x_offset\n\
float32 y_offset\n\
float32 height\n\
float32 width\n\
float32 depth\n\
";
  }

  static const char* value(const ::object_follower_zed::zed_roi_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::object_follower_zed::zed_roi_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.x_offset);
      stream.next(m.y_offset);
      stream.next(m.height);
      stream.next(m.width);
      stream.next(m.depth);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct zed_roi_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::object_follower_zed::zed_roi_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::object_follower_zed::zed_roi_<ContainerAllocator>& v)
  {
    s << indent << "x_offset: ";
    Printer<float>::stream(s, indent + "  ", v.x_offset);
    s << indent << "y_offset: ";
    Printer<float>::stream(s, indent + "  ", v.y_offset);
    s << indent << "height: ";
    Printer<float>::stream(s, indent + "  ", v.height);
    s << indent << "width: ";
    Printer<float>::stream(s, indent + "  ", v.width);
    s << indent << "depth: ";
    Printer<float>::stream(s, indent + "  ", v.depth);
  }
};

} // namespace message_operations
} // namespace ros

#endif // OBJECT_FOLLOWER_ZED_MESSAGE_ZED_ROI_H
